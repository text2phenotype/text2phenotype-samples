
{
    "resourceType":"DocumentReference",
    "id":"56015",
    "meta":{
        "versionId":"1",
        "lastUpdated":"2018-02-23T23:08:35.000+00:00"
    },
    "subject":{
        "reference":"Patient/55974"
    },
    "type":{
        "coding":[
            {
                "system":"http://loinc.org",
                "code":"46240-8",
                "display":"History of hospitalizations+History of outpatient visits"
            },
            {
                "system":"http://loinc.org",
                "code":"8716-3",
                "display":"Vital Signs"
            },
            {
                "system":"http://loinc.org",
                "code":"11450-4",
                "display":"Problem List"
            },
            {
                "system":"http://loinc.org",
                "code":"48765-2",
                "display":"Allergies, adverse reactions, alerts"
            },
            {
                "system":"http://loinc.org",
                "code":"10160-0",
                "display":"History of Medication Use"
            },
            {
                "system":"http://loinc.org",
                "code":"30954-2",
                "display":"Relevant diagnostic tests and/or laboratory data"
            },
            {
                "system":"http://loinc.org",
                "code":"MTHU004551",
                "display":"Bilirubin"
            },
            {
                "system":"http://loinc.org",
                "code":"LP20762-8",
                "display":"Prothrombin time assay"
            },
            {
                "system":"http://loinc.org",
                "code":"UNK",
                "display":"HEPATITIS C RNA"
            },
            {
                "system":"http://loinc.org",
                "code":"LP174046-5",
                "display":"HCV Genotype"
            },
            {
                "system":"http://loinc.org",
                "code":"11369-6",
                "display":"History of immunizations"
            },
            {
                "system":"http://loinc.org",
                "code":"29762-2",
                "display":"Social History"
            },
            {
                "system":"http://loinc.org",
                "code":"51847-2",
                "display":"Assessment and Plan"
            }
        ]
    },
    "indexed":"2018-02-23T18:08:34",
    "status":"current",
    "content":[
        {
            "attachment":{
                "contentType":"application/xml",
                "data":""
            }
        }
    ]
}