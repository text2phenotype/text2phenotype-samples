
{
    "resourceType":"DocumentReference",
    "id":"55984",
    "meta":{
        "versionId":"1",
        "lastUpdated":"2018-02-23T23:08:33.000+00:00"
    },
    "subject":{
        "reference":"Patient/55974"
    },
    "type":{
        "coding":[
            {
                "system":"http://loinc.org",
                "code":"46240-8",
                "display":"History of hospitalizations+History of outpatient visits"
            },
            {
                "system":"http://loinc.org",
                "code":"30954-2",
                "display":"Relevant diagnostic tests and/or laboratory data"
            },
            {
                "system":"http://loinc.org",
                "code":"MTHU004551",
                "display":"Bilirubin"
            }
        ]
    },
    "indexed":"2018-02-23T18:08:33",
    "status":"current",
    "content":[
        {
            "attachment":{
                "contentType":"application/xml",
                "data":""
            }
        }
    ]
}