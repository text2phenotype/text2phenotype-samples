
{
    "resourceType":"DocumentReference",
    "id":"56002",
    "meta":{
        "versionId":"1",
        "lastUpdated":"2018-02-23T23:08:34.000+00:00"
    },
    "subject":{
        "reference":"Patient/55974"
    },
    "type":{
        "coding":[
            {
                "system":"http://loinc.org",
                "code":"30954-2",
                "display":"Relevant diagnostic tests and/or laboratory data"
            },
            {
                "system":"http://loinc.org",
                "code":"LP20762-8",
                "display":"Prothrombin time assay"
            },
            {
                "system":"http://loinc.org",
                "code":"5902-2",
                "display":"Prothrombin time assay"
            },
            {
                "system":"http://loinc.org",
                "code":"UNK",
                "display":"HEPATITIS C RNA"
            },
            {
                "system":"http://loinc.org",
                "code":"LP174046-5",
                "display":"HCV Genotype"
            }
        ]
    },
    "indexed":"2018-02-23T18:08:34",
    "status":"current",
    "content":[
        {
            "attachment":{
                "contentType":"application/xml",
                "data":""
            }
        }
    ]
}